{"version":3,"sources":["webpack://bloglist-frontend/./src/components/presentational/Notification.js"],"names":["Notification","props","notification","setNotification","message","error","closeModal","open","onClose","className","role","setTimeout","setFocus","setText","id","color","onClick","retry","button","document","getElementById","modal","querySelector","focus","addEventListener","e","key","preventDefault","mapDispatchToProps","propTypes","PropTypes","connect","state"],"mappings":"uLASMA,EAAe,SAACC,GACpB,IAAQC,EAAkCD,EAAlCC,aAAcC,EAAoBF,EAApBE,gBAChBC,EAAUF,EAAaE,QACvBC,EAAQH,EAAaG,MAErBC,EAAa,WACjBH,EAAgB,KAGlB,OACE,gBAAC,IAAD,CACEI,QAAMH,IAAWC,GACjBG,QAAS,kBAAMF,KACfG,UAAS,uBAAkBL,EAAU,UAAY,SACjDM,KAAK,SAEL,yBAWJ,WACE,GAAGN,GAAWC,EAEZ,OADAM,YAAW,kBAAMC,EAAS,KAAI,KACvBR,GAAoBC,EAbxBQ,IAEH,gBAAC,YAAD,KACE,gBAAC,IAAD,CAAQC,GAAG,cAAcC,MAAM,MAAMC,QAAS,kBAAMV,MAApD,WAcN,SAASM,EAASK,GAChB,IAAMC,EAASC,SAASC,eAAe,eACjCC,EAAQF,SAASG,cAAc,UAClCJ,GAAUG,GAEXH,EAAOK,QACPF,EAAMG,iBAAiB,WAAW,SAACC,GACpB,QAAVA,EAAEC,MACHD,EAAEE,iBACFT,EAAOK,aAILN,EAAQ,GACdL,EAASK,OAYTW,EAAqB,CACzBzB,gB,OAAAA,GAGFH,EAAa6B,UAAY,CACvB1B,gBAAiB2B,6BAGnB,WAAeC,SAdS,SAACC,GACvB,MAAO,CACL9B,aAAc8B,EAAM9B,gBActB0B,EAFF,CAGE5B","file":"11.js","sourcesContent":["import React from \"react\"\n\nimport { PropTypes } from 'prop-types'\nimport { connect } from \"react-redux\"\n\nimport { Modal, Button } from 'semantic-ui-react'\n\nimport { setNotification } from 'Reducers/notificationReducer'\n\nconst Notification = (props) => {\n  const { notification, setNotification } = props\n  const message = notification.message\n  const error = notification.error\n\n  const closeModal = () => {\n    setNotification('')\n  }\n\n  return (\n    <Modal\n      open={message || error ? true : false}\n      onClose={() => closeModal()}\n      className={`notification ${message ? 'message' : 'error'}`}\n      role=\"alert\"\n    >\n      <i>\n        {setText()}\n      </i>\n      <Modal.Actions>\n        <Button id=\"modal-close\" color='red' onClick={() => closeModal()}>\n          Close\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  )\n\n  function setText() {\n    if(message || error) {\n      setTimeout(() => setFocus(5), 200)\n      return message ? message : error\n    }\n  }\n\n  function setFocus(retry) {\n    const button = document.getElementById('modal-close')\n    const modal = document.querySelector('.modal')\n    if(button && modal) {\n      // modal.querySelector('i').setAttribute('aria-live', 'assertive')\n      button.focus()\n      modal.addEventListener('keydown', (e) => {\n        if(e.key === 'Tab'){\n          e.preventDefault()\n          button.focus()\n        }\n      })\n    }\n    else if(retry > 0) {\n      setFocus(retry --)\n    }\n  }\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    notification: state.notification\n  }\n}\n\nconst mapDispatchToProps = {\n  setNotification,\n}\n\nNotification.propTypes = {\n  setNotification: PropTypes.func.isRequired,\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Notification)"],"sourceRoot":""}