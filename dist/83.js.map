{"version":3,"sources":["webpack://bloglist-frontend/./src/components/forms/CommentForm.js","webpack://bloglist-frontend/./src/components/container/Blog.js","webpack://bloglist-frontend/./src/components/container/Togglable.js","webpack://bloglist-frontend/./src/hooks/index.js","webpack://bloglist-frontend/./src/lib/index.js"],"names":["CommentForm","props","comment","handleSubmit","hide","Form","onSubmit","event","required","label","id","name","type","value","onChange","propTypes","PropTypes","Blog","useState","removed","setRemoved","blog","setBlog","useField","blogs","comments","login","removeBlog","match","setNotification","getBlogComments","likeBlog","addComment","useEffect","emptyObj","getComments","length","foundBl","find","b","params","preventDefault","newComment","timeStamp","Date","toDateString","token","message","setValue","error","undefined","to","className","title","author","href","url","target","rel","likes","Button","onClick","like","user","username","window","confirm","exception","remove","Togglable","buttonLabel","List","divided","relaxed","map","i","key","mapDispatchToProps","connect","state","children","visible","setVisible","childrenWithProps","React","child","filterBlogs","filter","getFieldsValues","credentials","fields","forEach","f","checkUrl","substring","populateWithBlogs","users","u","uBlogs","obj","Object","keys"],"mappings":"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","file":"83.js","sourcesContent":["import React from \"react\"\n\nimport { PropTypes } from 'prop-types'\n\nimport { Form } from 'semantic-ui-react'\n\nconst CommentForm = (props) => {\n  const { comment, handleSubmit, hide } = props\n  const onSubmit = (event) => {\n    handleSubmit(event)\n    if(hide) hide()\n  }\n\n  return (\n    <div>\n      <Form onSubmit={onSubmit}>\n        <Form.Input\n          required\n          label='Leave a comment'\n          id='comment'\n          name={comment.name}\n          type={comment.type}\n          value={comment.value}\n          onChange={comment.onChange}\n        />\n        <Form.Button type='submit'>Save</Form.Button>\n      </Form>\n    </div>\n  )\n}\n\nCommentForm.propTypes = {\n  comment: PropTypes.object.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  hide: PropTypes.func\n}\n\nexport default CommentForm","import React, { useState, useEffect } from \"react\"\n\nimport { PropTypes } from 'prop-types'\nimport { connect } from \"react-redux\"\nimport { Redirect } from \"react-router-dom\"\n\nimport { setNotification } from 'Reducers/notificationReducer'\nimport { getBlogComments, addComment } from 'Reducers/commentReducer'\nimport { removeBlog, likeBlog } from 'Reducers/blogReducer'\n\nimport { Button, List } from 'semantic-ui-react'\nimport Togglable from 'Containers/Togglable'\nimport CommentForm from \"Forms/CommentForm\"\n\nimport { useField } from 'Hooks'\nimport { emptyObj } from 'Lib'\n\nconst Blog = (props) => {\n  const [removed, setRemoved] = useState(false)\n  const [blog, setBlog] = useState({})\n  const comment = useField('text', 'comment')\n  const { blogs, comments, login, removeBlog, match,\n    setNotification, getBlogComments, likeBlog, addComment } = props\n\n  useEffect(() => {\n    if(!emptyObj(blog) && !removed) {\n      getComments()\n    }\n  },[blog])\n\n  // On page load, after fetching blogs, get blog from url param.\n  useEffect(() => {\n    if(blogs.length) {\n      const foundBl = blogs.find(b => b.id === match.params.id)\n      setBlog(foundBl)\n    }\n  },[blogs])\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    const newComment = {\n      comment: comment.value,\n      timeStamp: new Date().toDateString(),\n      blog: blog.id\n    }\n    try {\n      await addComment(login.token, newComment)\n      setNotification({ message: `A new comment \"${newComment.comment}\" added` })\n      comment.setValue('')\n    } catch (exception) {\n      setNotification({ error: `Could not add the comment: ${exception.message}` })\n    }\n  }\n\n  if(removed || blog === undefined){\n    return <Redirect to=\"/blogs\"/>\n  }\n  else if(emptyObj(blog)){\n    return (\n      <main>\n        <div className=\"loader\"></div>\n        <p>Fetching blog...</p>\n      </main>\n    )\n  }\n  else {\n    return (\n      <main>\n        <h1>{blog.title}</h1>\n        <h2>By {blog.author}</h2>\n        <p><a href={blog.url} target='_blank' rel='noopener noreferrer' >{blog.url}</a></p>\n        <p>Likes: {blog.likes}</p>\n        <Button onClick={() => like()} >Like</Button>\n        <p>Added by {blog.user.name}</p>\n        {\n          login.username === blog.user.username\n            ? <Button onClick={() => remove()} >Remove</Button>\n            : null\n        }\n        <Togglable buttonLabel='Add comment'>\n          <CommentForm comment={comment} handleSubmit={handleSubmit}/>\n        </Togglable>\n        <h3>Comments</h3>\n        <List divided relaxed>\n          {\n            comments.length\n              ? comments.map((b,i) =>\n                <List.Item key={i} >\n                  <p>{b.comment}</p><p>by {b.user.name} - {b.timeStamp}</p>\n                </List.Item>)\n              : <List.Item ><p>No comments yet</p></List.Item>\n          }\n        </List>\n      </main>\n    )\n  }\n\n  async function getComments() {\n    try {\n      await getBlogComments(blog)\n    } catch (exception) {\n      setNotification({ error: `Could not fetch comments: ${exception.message}` })\n    }\n  }\n\n  async function like() {\n    try {\n      await likeBlog(blog)\n    } catch (exception) {\n      setNotification({ error: `Could not add like: ${exception.message}` })\n    }\n  }\n\n  function remove() {\n    if(window.confirm(`Do you want to remove the blog ${blog.title} by ${blog.author}?`)) {\n      try {\n        removeBlog(login.token, blog)\n        setRemoved(true)\n        setNotification({ message: `Blog ${blog.title} by ${blog.author} removed` })\n      } catch (exception) {\n        setNotification({ error: `Could not remove the blog: ${exception.message}` })\n      }\n    }\n  }\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    blogs: state.blogs,\n    comments: state.comments,\n    login: state.login,\n  }\n}\n\nconst mapDispatchToProps = {\n  likeBlog,\n  removeBlog,\n  setNotification,\n  getBlogComments,\n  addComment\n}\n\nBlog.propTypes = {\n  login: PropTypes.object.isRequired,\n  comments: PropTypes.array.isRequired,\n  likeBlog: PropTypes.func.isRequired,\n  removeBlog: PropTypes.func.isRequired,\n  setNotification: PropTypes.func.isRequired,\n  getBlogComments: PropTypes.func.isRequired,\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Blog)","import React, { useState } from \"react\"\n\nimport { PropTypes } from 'prop-types'\n\nimport { Button } from 'semantic-ui-react'\n\nfunction Togglable(props) {\n  const { buttonLabel, children } = props\n  const [visible, setVisible] = useState(false)\n\n  const hide = () => setVisible(false)\n\n  const childrenWithProps = React.Children.map(children,\n    child => React.cloneElement(child, { hide }))\n\n  return (\n    <div>\n      { visible ?\n        <>\n          { childrenWithProps }\n          <Button onClick={() => setVisible(!visible)} >Cancel</Button>\n        </>\n        :\n        <Button onClick={() => setVisible(!visible)} >{buttonLabel}</Button>\n      }\n    </div>\n  )\n}\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired,\n}\n\nexport default Togglable","import { useState } from 'react'\n\nexport const useField = (type, name) => {\n  const [value, setValue] = useState('')\n\n  const onChange = (event) => {\n    setValue(event.target.value)\n  }\n\n  return {\n    name,\n    type,\n    value,\n    onChange,\n    setValue,\n  }\n}","export const filterBlogs = (blogs, user) => {\n  return blogs.filter(blog => {\n    return blog.user.username === user.username\n  }\n  )\n}\n\nexport const getFieldsValues = (...fields) => {\n  const credentials = {}\n  fields.forEach(f => {\n    credentials[f.name] = f.value\n  })\n  return credentials\n}\n\nexport const checkUrl = (url) => {\n  if(url.substring(0,7) === 'http://' | url.substring(0,8) === 'https://'){\n    return true\n  }\n  return false\n}\n\nexport const populateWithBlogs = (users, blogs) => {\n  return users.map( u => {\n    let uBlogs = blogs.filter( b => b.user.id === u.id )\n    return { ...u, blogs: uBlogs }\n  })\n}\n\nexport const emptyObj = (obj) => Object.keys(obj).length === 0\n"],"sourceRoot":""}