{"version":3,"sources":["webpack://bloglist-frontend/./src/components/container/User.js","webpack://bloglist-frontend/./src/lib/index.js"],"names":["User","props","useState","user","setUser","users","blogs","match","useEffect","length","fUser","populateWithBlogs","find","u","id","params","undefined","to","emptyObj","className","name","divided","relaxed","map","b","i","key","title","author","href","url","propTypes","PropTypes","connect","state","filterBlogs","filter","blog","username","getFieldsValues","credentials","fields","forEach","f","value","checkUrl","substring","uBlogs","obj","Object","keys"],"mappings":"2MAUMA,EAAO,SAACC,GACZ,OAAwBC,cAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,EAAwBJ,EAAxBI,MAAOC,EAAiBL,EAAjBK,MAAOC,EAAUN,EAAVM,MAUtB,OARAC,gBAAU,WACR,GAAGH,EAAMI,QAAUH,EAAMG,OAAQ,CAC/B,IACMC,GADSC,QAAkBN,EAAOC,GACnBM,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOP,EAAMQ,OAAOD,MACrDV,EAAQM,MAEV,CAACL,EAAOC,SAEEU,IAATb,EACM,gBAAC,KAAD,CAAUc,GAAG,YAEdC,QAASf,GAEb,4BACE,uBAAKgB,UAAU,WACf,8CAMF,4BACE,0BAAKhB,EAAKiB,MACV,mCACA,gBAAC,IAAD,CAAMC,SAAO,EAACC,SAAO,GAEjBnB,EAAKG,MAAMG,OACPN,EAAKG,MAAMiB,KAAI,SAACC,EAAEC,GAAH,OACf,gBAAC,SAAD,CAAWC,IAAKD,GACd,yBAAID,EAAEG,OACN,+BAAOH,EAAEI,QACT,qBAAGC,KAAML,EAAEM,KAAMN,EAAEM,SAGrB,gBAAC,SAAD,KAAW,6CAe3B9B,EAAK+B,UAAY,CACf1B,MAAO2B,6BACP1B,MAAO0B,6BACPzB,MAAOyB,+BAGT,WAAeC,SAbS,SAACC,GACvB,MAAO,CACL5B,MAAO4B,EAAM5B,MACbD,MAAO6B,EAAM7B,SAWE,KADnB,CAEEL,I,svBCvEK,IAAMmC,EAAc,SAAC7B,EAAOH,GACjC,OAAOG,EAAM8B,QAAO,SAAAC,GAClB,OAAOA,EAAKlC,KAAKmC,WAAanC,EAAKmC,aAK1BC,EAAkB,WAAe,IAC5C,IAAMC,EAAc,GADwB,mBAAXC,EAAW,yBAAXA,EAAW,gBAK5C,OAHAA,EAAOC,SAAQ,SAAAC,GACbH,EAAYG,EAAEvB,MAAQuB,EAAEC,SAEnBJ,GAGIK,EAAW,SAACf,GACvB,SAA0B,YAAvBA,EAAIgB,UAAU,EAAE,GAA0C,aAAvBhB,EAAIgB,UAAU,EAAE,KAM3CnC,EAAoB,SAACN,EAAOC,GACvC,OAAOD,EAAMkB,KAAK,SAAAV,GAChB,IAAIkC,EAASzC,EAAM8B,QAAQ,SAAAZ,GAAC,OAAIA,EAAErB,KAAKW,KAAOD,EAAEC,MAChD,cAAYD,GAAZ,IAAeP,MAAOyC,QAIb7B,EAAW,SAAC8B,GAAD,OAAqC,IAA5BC,OAAOC,KAAKF,GAAKvC","file":"772.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\n\nimport { PropTypes } from 'prop-types'\nimport { connect } from \"react-redux\"\nimport { Redirect } from \"react-router-dom\"\n\nimport { List } from 'semantic-ui-react'\n\nimport { emptyObj, populateWithBlogs } from 'Lib'\n\nconst User = (props) => {\n  const [user, setUser] = useState({})\n  const { users, blogs, match } = props\n\n  useEffect(() => {\n    if(users.length && blogs.length) {\n      const pUsers = populateWithBlogs(users, blogs)\n      const fUser = pUsers.find(u => u.id === match.params.id)\n      setUser(fUser)\n    }\n  },[users, blogs])\n\n  if(user === undefined) {\n    return <Redirect to='/users'/>\n  }\n  else if(emptyObj(user)) {\n    return (\n      <main>\n        <div className=\"loader\"></div>\n        <p>Fetching user...</p>\n      </main>\n    )\n  }\n  else {\n    return (\n      <main>\n        <h1>{user.name}</h1>\n        <h2>Blogs</h2>\n        <List divided relaxed>\n          {\n            user.blogs.length\n              ? user.blogs.map((b,i) =>\n                <List.Item key={i} >\n                  <p>{b.title}</p>\n                  <p>by {b.author}</p>\n                  <a href={b.url}>{b.url}</a>\n                </List.Item>\n              )\n              : <List.Item><p>No blogs yet</p></List.Item>\n          }\n        </List>\n      </main>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    blogs: state.blogs,\n    users: state.users,\n  }\n}\n\nUser.propTypes = {\n  users: PropTypes.array.isRequired,\n  blogs: PropTypes.array.isRequired,\n  match: PropTypes.object.isRequired\n}\n\nexport default connect(\n  mapStateToProps, null\n)(User)","export const filterBlogs = (blogs, user) => {\n  return blogs.filter(blog => {\n    return blog.user.username === user.username\n  }\n  )\n}\n\nexport const getFieldsValues = (...fields) => {\n  const credentials = {}\n  fields.forEach(f => {\n    credentials[f.name] = f.value\n  })\n  return credentials\n}\n\nexport const checkUrl = (url) => {\n  if(url.substring(0,7) === 'http://' | url.substring(0,8) === 'https://'){\n    return true\n  }\n  return false\n}\n\nexport const populateWithBlogs = (users, blogs) => {\n  return users.map( u => {\n    let uBlogs = blogs.filter( b => b.user.id === u.id )\n    return { ...u, blogs: uBlogs }\n  })\n}\n\nexport const emptyObj = (obj) => Object.keys(obj).length === 0\n"],"sourceRoot":""}