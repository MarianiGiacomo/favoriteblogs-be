{"version":3,"sources":["webpack://bloglist-frontend/./src/lib/index.js","webpack://bloglist-frontend/./node_modules/semantic-ui-react/dist/es/collections/Table/TableBody.js","webpack://bloglist-frontend/./node_modules/semantic-ui-react/dist/es/collections/Table/TableCell.js","webpack://bloglist-frontend/./node_modules/semantic-ui-react/dist/es/collections/Table/TableHeader.js","webpack://bloglist-frontend/./node_modules/semantic-ui-react/dist/es/collections/Table/TableFooter.js","webpack://bloglist-frontend/./node_modules/semantic-ui-react/dist/es/collections/Table/TableHeaderCell.js","webpack://bloglist-frontend/./node_modules/semantic-ui-react/dist/es/collections/Table/TableRow.js","webpack://bloglist-frontend/./node_modules/semantic-ui-react/dist/es/collections/Table/Table.js"],"names":["filterBlogs","blogs","user","filter","blog","username","getFieldsValues","credentials","fields","forEach","f","name","value","checkUrl","url","substring","populateWithBlogs","users","map","u","uBlogs","b","id","emptyObj","obj","Object","keys","length","TableBody","props","children","className","classes","rest","getUnhandledProps","ElementType","getElementType","handledProps","defaultProps","as","propTypes","TableCell","active","collapsing","content","disabled","error","icon","negative","positive","selectable","singleLine","textAlign","verticalAlign","warning","width","childrenUtils","Icon","create","TableHeader","fullWidth","TableFooter","TableHeaderCell","sorted","TableRow","cellAs","cells","cell","Table","attached","basic","celled","color","columns","compact","definition","fixed","footerRow","headerRow","headerRows","inverted","padded","renderBodyRow","size","sortable","stackable","striped","structured","tableData","unstackable","headerShorthandOptions","headerElement","data","index","Body","Cell","Footer","Header","HeaderCell","Row"],"mappings":"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","file":"66.js","sourcesContent":["export const filterBlogs = (blogs, user) => {\n  return blogs.filter(blog => {\n    return blog.user.username === user.username\n  }\n  )\n}\n\nexport const getFieldsValues = (...fields) => {\n  const credentials = {}\n  fields.forEach(f => {\n    credentials[f.name] = f.value\n  })\n  return credentials\n}\n\nexport const checkUrl = (url) => {\n  if(url.substring(0,7) === 'http://' | url.substring(0,8) === 'https://'){\n    return true\n  }\n  return false\n}\n\nexport const populateWithBlogs = (users, blogs) => {\n  return users.map( u => {\n    let uBlogs = blogs.filter( b => b.user.id === u.id )\n    return { ...u, blogs: uBlogs }\n  })\n}\n\nexport const emptyObj = (obj) => Object.keys(obj).length === 0\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getElementType, getUnhandledProps } from '../../lib';\n\nfunction TableBody(props) {\n  var children = props.children,\n      className = props.className;\n  var classes = cx(className);\n  var rest = getUnhandledProps(TableBody, props);\n  var ElementType = getElementType(TableBody, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nTableBody.handledProps = [\"as\", \"children\", \"className\"];\nTableBody.defaultProps = {\n  as: 'tbody'\n};\nTableBody.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string\n} : {};\nexport default TableBody;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A table row can have cells.\n */\n\nfunction TableCell(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      content = props.content,\n      disabled = props.disabled,\n      error = props.error,\n      icon = props.icon,\n      negative = props.negative,\n      positive = props.positive,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning,\n      width = props.width;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(width, 'wide'), className);\n  var rest = getUnhandledProps(TableCell, props);\n  var ElementType = getElementType(TableCell, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), Icon.create(icon), content);\n}\n\nTableCell.handledProps = [\"active\", \"as\", \"children\", \"className\", \"collapsing\", \"content\", \"disabled\", \"error\", \"icon\", \"negative\", \"positive\", \"selectable\", \"singleLine\", \"textAlign\", \"verticalAlign\", \"warning\", \"width\"];\nTableCell.defaultProps = {\n  as: 'td'\n};\nTableCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A cell can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A cell can be collapsing so that it only uses as much space as required. */\n  collapsing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A cell can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A cell may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** Add an Icon by name, props object, or pass an <Icon /> */\n  icon: customPropTypes.itemShorthand,\n\n  /** A cell may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A cell may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A cell can be selectable. */\n  selectable: PropTypes.bool,\n\n  /** A cell can specify that its contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table cell can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table cell can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A cell may warn a user. */\n  warning: PropTypes.bool,\n\n  /** A table can specify the width of individual columns independently. */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nTableCell.create = createShorthandFactory(TableCell, function (content) {\n  return {\n    content: content\n  };\n});\nexport default TableCell;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A table can have a header.\n */\n\nfunction TableHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fullWidth = props.fullWidth;\n  var classes = cx(useKeyOnly(fullWidth, 'full-width'), className);\n  var rest = getUnhandledProps(TableHeader, props);\n  var ElementType = getElementType(TableHeader, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nTableHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fullWidth\"];\nTableHeader.defaultProps = {\n  as: 'thead'\n};\nTableHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A definition table can have a full width header or footer, filling in the gap left by the first column. */\n  fullWidth: PropTypes.bool\n} : {};\nexport default TableHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps } from '../../lib';\nimport TableHeader from './TableHeader';\n/**\n * A table can have a footer.\n */\n\nfunction TableFooter(props) {\n  var as = props.as;\n  var rest = getUnhandledProps(TableFooter, props);\n  return /*#__PURE__*/React.createElement(TableHeader, _extends({}, rest, {\n    as: as\n  }));\n}\n\nTableFooter.handledProps = [\"as\"];\nTableFooter.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType\n} : {};\nTableFooter.defaultProps = {\n  as: 'tfoot'\n};\nexport default TableFooter;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps, useValueAndKey } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have a header cell.\n */\n\nfunction TableHeaderCell(props) {\n  var as = props.as,\n      className = props.className,\n      sorted = props.sorted;\n  var classes = cx(useValueAndKey(sorted, 'sorted'), className);\n  var rest = getUnhandledProps(TableHeaderCell, props);\n  return /*#__PURE__*/React.createElement(TableCell, _extends({}, rest, {\n    as: as,\n    className: classes\n  }));\n}\n\nTableHeaderCell.handledProps = [\"as\", \"className\", \"sorted\"];\nTableHeaderCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A header cell can be sorted in ascending or descending order. */\n  sorted: PropTypes.oneOf(['ascending', 'descending'])\n} : {};\nTableHeaderCell.defaultProps = {\n  as: 'th'\n};\nexport default TableHeaderCell;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have rows.\n */\n\nfunction TableRow(props) {\n  var active = props.active,\n      cellAs = props.cellAs,\n      cells = props.cells,\n      children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      error = props.error,\n      negative = props.negative,\n      positive = props.positive,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), className);\n  var rest = getUnhandledProps(TableRow, props);\n  var ElementType = getElementType(TableRow, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), _map(cells, function (cell) {\n    return TableCell.create(cell, {\n      defaultProps: {\n        as: cellAs\n      }\n    });\n  }));\n}\n\nTableRow.handledProps = [\"active\", \"as\", \"cellAs\", \"cells\", \"children\", \"className\", \"disabled\", \"error\", \"negative\", \"positive\", \"textAlign\", \"verticalAlign\", \"warning\"];\nTableRow.defaultProps = {\n  as: 'tr',\n  cellAs: 'td'\n};\nTableRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A row can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** An element type to render as (string or function). */\n  cellAs: PropTypes.elementType,\n\n  /** Shorthand array of props for TableCell. */\n  cells: customPropTypes.collectionShorthand,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A row can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A row may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** A row may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A row may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A table row can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table row can adjust its vertical alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A row may warn a user. */\n  warning: PropTypes.bool\n} : {};\nTableRow.create = createShorthandFactory(TableRow, function (cells) {\n  return {\n    cells: cells\n  };\n});\nexport default TableRow;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport TableBody from './TableBody';\nimport TableCell from './TableCell';\nimport TableFooter from './TableFooter';\nimport TableHeader from './TableHeader';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableRow from './TableRow';\n/**\n * A table displays a collections of data grouped into rows.\n */\n\nfunction Table(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      celled = props.celled,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      color = props.color,\n      columns = props.columns,\n      compact = props.compact,\n      definition = props.definition,\n      fixed = props.fixed,\n      footerRow = props.footerRow,\n      headerRow = props.headerRow,\n      headerRows = props.headerRows,\n      inverted = props.inverted,\n      padded = props.padded,\n      renderBodyRow = props.renderBodyRow,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      size = props.size,\n      sortable = props.sortable,\n      stackable = props.stackable,\n      striped = props.striped,\n      structured = props.structured,\n      tableData = props.tableData,\n      textAlign = props.textAlign,\n      unstackable = props.unstackable,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', color, size, useKeyOnly(celled, 'celled'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(definition, 'definition'), useKeyOnly(fixed, 'fixed'), useKeyOnly(inverted, 'inverted'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(sortable, 'sortable'), useKeyOnly(stackable, 'stackable'), useKeyOnly(striped, 'striped'), useKeyOnly(structured, 'structured'), useKeyOnly(unstackable, 'unstackable'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(basic, 'basic'), useKeyOrValueAndKey(compact, 'compact'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column'), 'table', className);\n  var rest = getUnhandledProps(Table, props);\n  var ElementType = getElementType(Table, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  var hasHeaderRows = headerRow || headerRows;\n  var headerShorthandOptions = {\n    defaultProps: {\n      cellAs: 'th'\n    }\n  };\n  var headerElement = hasHeaderRows && /*#__PURE__*/React.createElement(TableHeader, null, TableRow.create(headerRow, headerShorthandOptions), _map(headerRows, function (data) {\n    return TableRow.create(data, headerShorthandOptions);\n  }));\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), headerElement, /*#__PURE__*/React.createElement(TableBody, null, renderBodyRow && _map(tableData, function (data, index) {\n    return TableRow.create(renderBodyRow(data, index));\n  })), footerRow && /*#__PURE__*/React.createElement(TableFooter, null, TableRow.create(footerRow)));\n}\n\nTable.handledProps = [\"as\", \"attached\", \"basic\", \"celled\", \"children\", \"className\", \"collapsing\", \"color\", \"columns\", \"compact\", \"definition\", \"fixed\", \"footerRow\", \"headerRow\", \"headerRows\", \"inverted\", \"padded\", \"renderBodyRow\", \"selectable\", \"singleLine\", \"size\", \"sortable\", \"stackable\", \"striped\", \"structured\", \"tableData\", \"textAlign\", \"unstackable\", \"verticalAlign\"];\nTable.defaultProps = {\n  as: 'table'\n};\nTable.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach table to other content */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A table can reduce its complexity to increase readability. */\n  basic: PropTypes.oneOfType([PropTypes.oneOf(['very']), PropTypes.bool]),\n\n  /** A table may be divided each row into separate cells. */\n  celled: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A table can be collapsing, taking up only as much space as its rows. */\n  collapsing: PropTypes.bool,\n\n  /** A table can be given a color to distinguish it from other tables. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A table can specify its column count to divide its content evenly. */\n  columns: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A table may sometimes need to be more compact to make more rows visible at a time. */\n  compact: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A table may be formatted to emphasize a first column that defines a rows content. */\n  definition: PropTypes.bool,\n\n  /**\n   * A table can use fixed a special faster form of table rendering that does not resize table cells based on content\n   */\n  fixed: PropTypes.bool,\n\n  /** Shorthand for a TableRow to be placed within Table.Footer. */\n  footerRow: customPropTypes.itemShorthand,\n\n  /** Shorthand for a TableRow to be placed within Table.Header. */\n  headerRow: customPropTypes.every([customPropTypes.disallow(['headerRows']), customPropTypes.itemShorthand]),\n\n  /** Shorthand for multiple TableRows to be placed within Table.Header. */\n  headerRows: customPropTypes.every([customPropTypes.disallow(['headerRow']), customPropTypes.collectionShorthand]),\n\n  /** A table's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A table may sometimes need to be more padded for legibility. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /**\n   * Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.\n   *\n   * @param {*} data - An element in the `tableData` array.\n   * @param {number} index - The index of the current element in `tableData`.\n   * @returns {*} Shorthand for a Table.Row.\n   */\n  renderBodyRow: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['tableData']), PropTypes.func]),\n\n  /** A table can have its rows appear selectable. */\n  selectable: PropTypes.bool,\n\n  /** A table can specify that its cell contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table can also be small or large. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive')),\n\n  /** A table may allow a user to sort contents by clicking on a table header. */\n  sortable: PropTypes.bool,\n\n  /** A table can specify how it stacks table content responsively. */\n  stackable: PropTypes.bool,\n\n  /** A table can stripe alternate rows of content with a darker color to increase contrast. */\n  striped: PropTypes.bool,\n\n  /** A table can be formatted to display complex structured data. */\n  structured: PropTypes.bool,\n\n  /** Data to be passed to the renderBodyRow function. */\n  tableData: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['renderBodyRow']), PropTypes.array]),\n\n  /** A table can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table can specify how it stacks table content responsively. */\n  unstackable: PropTypes.bool,\n\n  /** A table can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nTable.Body = TableBody;\nTable.Cell = TableCell;\nTable.Footer = TableFooter;\nTable.Header = TableHeader;\nTable.HeaderCell = TableHeaderCell;\nTable.Row = TableRow;\nexport default Table;"],"sourceRoot":""}